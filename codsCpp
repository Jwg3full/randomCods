#include <iostream>
using namespace std;

int main()
{
    cout<<"Hello World";

    return 0;
}

#include <iostream>

int main()
{
    std::cout<<"Hello World";

    return 0;
}

#include <iostream>
#include <new>
using namespace std;

int main()
{
    int a = 1;
    cout << "valor de a: " << a <<"valor de a:" << a;
    
    int b;
    
    cin >> a;
    cout << a;
    return 0;
}

#include <iostream>
using namespace std;

class Pessoa { 
    public:
        int idade;
        string nome;
        
};

int main(){
    Pessoa pessoa1;
    pessoa1.idade = 15;
    pessoa1.nome = "John";
    
    cout << pessoa1.nome << " tem " << pessoa1.idade << "anos";
    
    return 0;
}

#include <iostream>
#include <ios>
#include <limits>
#include <string>

class Cookie {
    public:
        float preco;
        std::string sabor;
};

int main(){
    Cookie cookie1;
    
    std::cout << "digite o valor do cookie:";
    std::cin >> cookie1.preco;
        

    std::cout << "digite sabor do cookie:";
    
    std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');

    
    getline(std::cin, cookie1.sabor );


    
    std::cout << "\nCookie1:" << cookie1.sabor << " custa R$" << cookie1.preco;
}

#include <iostream>
#include <ios>
#include <limits>
#include <string>

class Cookie {
    public://modificador de acesso
        float preco;//atributo
        std::string sabor;//atributo
        std::string formato;//atributo
        
        // método construtor é inicilizado quando a class é criada
        Cookie(){
            std::cout << "cookie criado" << "\n";
            std::cout << "\n";

            formato = "Redondo"; // inicializa com o formato "redondo"
        }
};

int main(){
    Cookie cookie1;
    
    std::cout << "digite o valor do cookie:";
    std::cin >> cookie1.preco;
        
    std::cout << "digite sabor do cookie:";
    std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n'); //limpar o buffer
    getline(std::cin, cookie1.sabor ); // le com espaço e tals
    
    std::cout << "\nCookie1:" << cookie1.sabor << " custa R$" << cookie1.preco << " forma de:" <<cookie1.formato << "\n";
    std::cout << "\n";
    
    Cookie cookie2;
    
    cookie2.preco = 30.9;
        
    std::cout << "digite sabor do cookie:";
    
    getline(std::cin, cookie2.sabor );
    
    std::cout << "digite o formato do cookie:";
    std::cin >> cookie2.formato;
    
    std::cout << "\nCookie2:" << cookie2.sabor << " custa R$" << cookie2.preco << " forma de:" <<cookie2.formato;
    
}

#include <iostream>
#include <ios>
#include <limits>
#include <string>

class Coxinha {
    public:
        
        std::string sabor;


    Coxinha(std::string saborCoxinha){
        std::cout << "C sabor\n";
        sabor = saborCoxinha;
    }
};
int main(){
    
    std::string saborUser;
    
    std::cout << "Sabor:";
    getline(std::cin, saborUser );
    
    
    Coxinha coxinha1(saborUser);
    std::cout << "coxinha sabor:" << coxinha1.sabor << std::endl;
    
    //Pessoa pessoa2("Jonas"); //Cria um objeto da classe pessoa com nome
    //std::cout << "pessoa2:" << pessoa2.nome << "\n";


    
}

#include <iostream>

class eletronico{
    private:
        std::string marca;
    
    public:
    
    std::string getMarca(){
        return marca;
    }
    
    void setMarca(std::string marca){
        this -> marca = marca;
    }
    protected:
    
    void souEletronico(){
        printf("criado.");
    }
};

class celular: public eletronico{
    private:
        int polegadas;
    
    public:
    
    int getPolegadas(){
        return polegadas;
    }
    
    void setPolegadas(int polegadas){
        this-> polegadas = polegadas;
    }
};

int main()
{
    eletronico eletronico1;
    eletronico1.setMarca("apple");
    std::cout << "eletronico1:" << eletronico1.getMarca() << std::endl; 
    
    celular celular1;
    celular1.setMarca("Iphone");
    celular1.setPolegadas(10);
        std::cout << "celular1:" << celular1.getMarca() << celular1.getPolegadas() <<std::endl; 

    return 0;
}

EXERCICIO POO

#include <iostream>

class Data {
    private:
    int dia;
    int mes;
    int ano;
    public:
    // Construtor da classe Data
    Data() {}
    // Métodos de acesso
    int getDia() { return dia; }
    int getMes() { return mes; }
    int getAno() { return ano; }
    void setDia(int dia){this->dia = dia;}
    void setMes(int mes){this->mes = mes;}
    void setAno(int ano){this->ano = ano;}
    // Método para exibir a data no formato dd/mm/aaaa
    void exibirData() {
    std::cout << dia << "/" << mes << "/" << ano;
    };
};
class Pessoa{
    private:
    int matricula;
    std::string nome;
    std::string email;
    
    public:
    int getMatricula(){
        return matricula;
    }
    
    void setMatricula(int matricula){
        this -> matricula = matricula;
    }
    
    std::string getNome(){
        return nome;
    }
    
    void setNome(std::string nome){
        this -> nome = nome;
    }
    
    std::string getEmail(){
        return email;
    }
    
    void setEmail(std::string email){
        this -> email = email;
    }
};

class Professor : public Pessoa{
    private:
    std::string titulação;
    std::string linhaPesquisa;
    
    public:
    
    std::string getTitulação(){
        return titulação;
    }
    
    void setTitulação(std::string titulação){
        this -> titulação = titulação;
    }
    
    std::string LinhaPesquisa(){
        return linhaPesquisa;
    }
    
    void setLinhaPesquisa(std::string linhaPesquisa){
        this -> linhaPesquisa = linhaPesquisa;
    }
};

class Aluno : public Pessoa{
    private:
    std::string turma;
    
    public:
    
    std::string LinhaTurma(){
        return turma;
    }
    
    void setTurma(std::string turma){
        this -> turma = turma;
    }
};
int main()
{
    std::string euMudoTodaHora;
    int euMudoTodaHoraInt;
    //principal aluno ↓
    Aluno aluno1;
    std::cout << "sua turma: ";
    getline(std::cin, euMudoTodaHora );
    aluno1.setTurma(euMudoTodaHora);
    // pessoa ↓
    std::cout << "seu nome: ";
    getline(std::cin, euMudoTodaHora );
    aluno1.setNome(euMudoTodaHora);
    
    std::cout << "seu email: ";
    getline(std::cin, euMudoTodaHora );
    aluno1.setEmail(euMudoTodaHora);
    
    std::cout << "sua matricula: ";
    std::cin >> euMudoTodaHora;
    aluno1.setMatricula(euMudoTodaHoraInt);
    
    //principal Professor ↓
    Professor professor1;
    std::cout << "sua turma: ";
    getline(std::cin, euMudoTodaHora );
    professor1.setTitulação(euMudoTodaHora);

    std::cout << "sua turma: ";
    getline(std::cin, euMudoTodaHora );
    professor1.setLinhaPesquisa(euMudoTodaHora);
    
    //pessoa ↓
    std::cout << "seu nome: ";
    getline(std::cin, euMudoTodaHora );
    professor1.setNome(euMudoTodaHora);
    
    std::cout << "seu email: ";
    getline(std::cin, euMudoTodaHora );
    professor1.setEmail(euMudoTodaHora);
    
    std::cout << "sua matricula: ";
    std::cin >> euMudoTodaHora;
    professor1.setMatricula(euMudoTodaHoraInt);
    
    return 0;
}
